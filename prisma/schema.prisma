generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  fullname    String
  password    String
  countryId   String
  role        UserRole     @default(CLIENT)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  country     Country      @relation(fields: [countryId], references: [id])
  products    Product[]
  cart        Cart?
  wishedItems WishedItem[]

  @@map("users")
}

model Country {
  id    String @id @db.VarChar(2)
  name  String @unique
  users User[]

  @@map("countries")
}

model Product {
  id          String         @id @default(uuid())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  description String
  price       Int
  stock       Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
  images      ProductImage[]
  categories  Category[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  wishedItems WishedItem[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(uuid())
  path      String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@map("product_images")
}

model Category {
  id          Int       @id @default(autoincrement())
  title       String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model WishedItem {
  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([userId, productId])
  @@map("wished_items")
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  amount    Int
  createdAt DateTime @default(now())

  @@map("cart_items")
}

model Cart {
  id     String     @id @default(uuid())
  user   User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?    @unique
  items  CartItem[]

  @@map("carts")
}

model Order {
  id        String      @id @default(uuid())
  total     Int
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  items     OrderItem[]
  payment   Payment?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  amount    Int
  price     Int
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id        String        @id @default(uuid())
  total     Int
  status    PaymentStatus @default(PENDING)
  method    PaymentMethod
  orderId   String        @unique
  createdAt DateTime      @default(now())
  order     Order         @relation(fields: [orderId], references: [id])

  @@map("payments")
}

enum UserRole {
  CLIENT
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
}

enum PaymentMethod {
  BISON
  HUMBLECARD
  PAYMATE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
