generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id @default(uuid())
  email       String          @unique
  fullname    String
  password    String
  role        UserRole        @default(CLIENT)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  addresses   Address[]
  cart        Cart?
  products    Product[]
  wishedItems WishedItem[]
  orders      Order[]
  payments    Payment[]
  reviews     ProductReview[]

  @@map("users")
}

model Country {
  id        String  @id @db.VarChar(2)
  name      String  @unique
  phoneCode String
  states    State[]

  @@map("countries")
}

model State {
  id        Int       @id @default(autoincrement())
  countryId String
  name      String
  country   Country   @relation(fields: [countryId], references: [id])
  addresses Address[]

  @@map("states")
}

model Address {
  id            String   @id @default(uuid())
  userId        String
  stateId       Int
  contactName   String
  phoneCode     String
  phoneNumber   String
  city          String
  postalCode    Int
  street        String
  streetDetails String
  default       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  state         State    @relation(fields: [stateId], references: [id])
  orders        Order[]

  @@map("addresses")
}

model Product {
  id          String          @id @default(uuid())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  description String
  price       Int
  stock       Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?
  images      ProductImage[]
  reviews     ProductReview[]
  categories  Category[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  wishedItems WishedItem[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(uuid())
  path      String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@map("product_images")
}

model ProductReview {
  id        String   @id @default(uuid())
  userId    String
  productId String
  content   String
  rating    Int
  edited    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("product_reviews")
}

model Category {
  id          Int       @id @default(autoincrement())
  title       String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model WishedItem {
  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([userId, productId])
  @@map("wished_items")
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  amount    Int
  createdAt DateTime @default(now())

  @@map("cart_items")
}

model Cart {
  id     String     @id @default(uuid())
  user   User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?    @unique
  items  CartItem[]

  @@map("carts")
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  addressId String?
  total     Int
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  items     OrderItem[]
  user      User        @relation(fields: [userId], references: [id])
  address   Address?    @relation(fields: [addressId], references: [id])
  payment   Payment?
  shipment  Shipment?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  amount    Int
  price     Int
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id        String         @id @default(uuid())
  userId    String
  orderId   String         @unique
  total     Int
  status    PaymentStatus  @default(PENDING)
  method    PaymentMethod?
  createdAt DateTime       @default(now())
  user      User           @relation(fields: [userId], references: [id])
  order     Order          @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Shipment {
  id        String         @id @default(uuid())
  orderId   String         @unique
  status    ShipmentStatus @default(PENDING)
  createdAt DateTime       @default(now())
  order     Order          @relation(fields: [orderId], references: [id])

  @@map("shipments")
}

enum UserRole {
  CLIENT
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  BISON
  HUMBLECARD
  PAYMATE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  REFUNDED
  FAILED
}

enum ShipmentStatus {
  PENDING
  PRE_TRANSIT
  IN_TRANSIT
  DELAYED
  OUT_FOR_DELIVERY
  FAILED_ATTEMPT
  DELIVERED
  PICKUP_READY
  RETURNED
  EXCEPTION
  FAILED
}
